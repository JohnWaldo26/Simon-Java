/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.simon;

import java.awt.Color;
import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.Timer;
import java.util.Random;
import java.lang.Thread;    
import java.util.concurrent.CountDownLatch;
/**
 *
 * @author johnwaldo
 */

public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    public Game(String user,int score) {
        initComponents();
            User.setText(user);
            Yellow.setOpaque(true);
            Yellow.setContentAreaFilled(true);
            Yellow.setBorderPainted(false);
            Green.setOpaque(true);
            Green.setContentAreaFilled(true);
            Green.setBorderPainted(false);
            Blue.setOpaque(true);
            Blue.setContentAreaFilled(true);
            Blue.setBorderPainted(false);
            Red.setOpaque(true);
            Red.setContentAreaFilled(true);
            Red.setBorderPainted(false);
            highscore=score;
            name=user;
            HighScore.setText("High Score: "+Integer.toString(highscore));
            newrand();
            displayColorSequence(sequenceColors);  
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        counterLabel = new javax.swing.JLabel();
        User = new javax.swing.JLabel();
        Blue = new javax.swing.JButton();
        Green = new javax.swing.JButton();
        Yellow = new javax.swing.JButton();
        Red = new javax.swing.JButton();
        HighScore = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        counterLabel.setFont(new java.awt.Font("Phosphate", 1, 24)); // NOI18N
        counterLabel.setForeground(new java.awt.Color(0, 153, 0));
        counterLabel.setText("Counter: 0");

        User.setBackground(new java.awt.Color(0, 0, 0));
        User.setFont(new java.awt.Font("Phosphate", 1, 24)); // NOI18N
        User.setForeground(new java.awt.Color(0, 153, 0));

        Blue.setBackground(new java.awt.Color(0, 51, 255));
        Blue.setForeground(new java.awt.Color(0, 51, 255));
        Blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueActionPerformed(evt);
            }
        });

        Green.setBackground(new java.awt.Color(0, 153, 0));
        Green.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreenActionPerformed(evt);
            }
        });

        Yellow.setBackground(new java.awt.Color(255, 255, 0));
        Yellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YellowActionPerformed(evt);
            }
        });

        Red.setBackground(new java.awt.Color(255, 0, 0));
        Red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedActionPerformed(evt);
            }
        });

        HighScore.setBackground(new java.awt.Color(0, 0, 0));
        HighScore.setFont(new java.awt.Font("Phosphate", 1, 24)); // NOI18N
        HighScore.setForeground(new java.awt.Color(0, 153, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(User, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(129, 129, 129)
                .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HighScore, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Green, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Yellow, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Blue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Red, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Yellow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Red, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Blue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Green, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(User)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(HighScore, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                        .addComponent(counterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueActionPerformed
        // TODO add your handling code here:
      userColors.add(0);
      if (userColors.size()<sequenceColors.size())
      {
          for (int length=0;length<userColors.size();length++)
          {
              if (userColors.get(length)!=sequenceColors.get(length))
              {
                  GameOver over=new GameOver(highscore,name);
                  over.setVisible(true);
              }    
          }    
      }    
      else 
      {    
           checkLists(userColors, sequenceColors);
      }
    }//GEN-LAST:event_BlueActionPerformed

    private void YellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YellowActionPerformed
        // TODO add your handling code here:
      userColors.add(1);
      if (userColors.size()<sequenceColors.size())
      {
          for (int length=0;length<userColors.size();length++)
          {
              if (userColors.get(length)!=sequenceColors.get(length))
              {
                  GameOver over=new GameOver(highscore,name);
                  over.setVisible(true);
              }    
          }    
      }    
      else 
      {    
           checkLists(userColors, sequenceColors);
      }
    }//GEN-LAST:event_YellowActionPerformed

@SuppressWarnings("empty-statement")
    private void RedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedActionPerformed
        // TODO add your handling code here:
       userColors.add(2);
       if (userColors.size()<sequenceColors.size())
      {
          for (int length=0;length<userColors.size();length++)
          {
              if (userColors.get(length)!=sequenceColors.get(length))
              {
                  GameOver over=new GameOver(highscore,name);
                  over.setVisible(true);
              }    
          }    
      }    
      else 
      {    
           checkLists(userColors, sequenceColors);
      }
    }//GEN-LAST:event_RedActionPerformed

    private void GreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreenActionPerformed
        // TODO add your handling code here:
       userColors.add(3);
       if (userColors.size()<sequenceColors.size())
      {
          for (int length=0;length<userColors.size();length++)
          {
              if (userColors.get(length)!=sequenceColors.get(length))
              {
                  GameOver over=new GameOver(highscore,name);
                  over.setVisible(true);
              }    
          }    
      }    
      else 
      {    
           checkLists(userColors, sequenceColors);
      }
    }//GEN-LAST:event_GreenActionPerformed
    private void displayColorSequence(ArrayList<Integer> sequenceColors) {
    int delay = 1000; // Delay between color flashes (1 second)

    Timer timer = new Timer(delay, new ActionListener() {
        private int currentIndex = 0;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (currentIndex < sequenceColors.size()) {
                final Integer flashColor = sequenceColors.get(currentIndex);
                flashButton(flashColor);

                currentIndex++;
            } else {
                ((Timer) e.getSource()).stop(); // Stop the timer when all colors have been flashed
            }
        }
    });

    timer.setRepeats(true);
    timer.start();
}



    private void newrand()
    {
        Random rand = new Random();
        int random = rand.nextInt(4);
        sequenceColors.add(random);
    }        
    private void checkLists(ArrayList<Integer> userColors, ArrayList<Integer> sequenceColors) {    
         if (userColors.equals(sequenceColors)) 
         {
            newrand();
            score++;
            counterLabel.setText("Counter: "+Integer.toString(score));
            if (score>highscore)
            {
                highscore=score;
            }    
            HighScore.setText("High Score: "+Integer.toString(highscore));
            userColors.clear();
            displayColorSequence(sequenceColors);
         }
         else
         {
            GameOver over=new GameOver(highscore,name);
            over.setVisible(true);
         }    
           
}   
   private void flashButton(Integer flashColor) {
    // Reset the button colors
    Blue.setBackground(new java.awt.Color(0,51,255));
    Yellow.setBackground(Color.YELLOW);
    Red.setBackground(Color.RED);
    Green.setBackground(new java.awt.Color(0,153,0));

    // Flash the specified button color
    if (flashColor == 0) {
        Timer timer = new Timer(500, new ActionListener() {
            private boolean isWhite = false;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (isWhite) {
                    Blue.setBackground(new java.awt.Color(0,51,255));
                } else {
                    Blue.setBackground(Color.WHITE);
                }

                isWhite = !isWhite;

                if (!isWhite) {
                    ((Timer) e.getSource()).stop(); // Stop the timer after the second color change
                }
            }
        });

        timer.setRepeats(true);
        timer.start();
    } else if (flashColor == 1) {
        Timer timer = new Timer(500, new ActionListener() {
            private boolean isWhite = false;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (isWhite) {
                    Yellow.setBackground(Color.YELLOW);
                } else {
                    Yellow.setBackground(Color.WHITE);
                }

                isWhite = !isWhite;

                if (!isWhite) {
                    ((Timer) e.getSource()).stop(); // Stop the timer after the second color change
                }
            }
        });

        timer.setRepeats(true);
        timer.start();
    } else if (flashColor == 2) {
        Timer timer = new Timer(500, new ActionListener() {
            private boolean isWhite = false;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (isWhite) {
                    Red.setBackground(Color.RED);
                } else {
                    Red.setBackground(Color.WHITE);
                }

                isWhite = !isWhite;

                if (!isWhite) {
                    ((Timer) e.getSource()).stop(); // Stop the timer after the second color change
                }
            }
        });

        timer.setRepeats(true);
        timer.start();
    } else if (flashColor == 3) {
        Timer timer = new Timer(500, new ActionListener() {
            private boolean isWhite = false;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (isWhite) {
                    Green.setBackground(new java.awt.Color(0,153,0));
                } else {
                    Green.setBackground(Color.WHITE);
                }

                isWhite = !isWhite;

                if (!isWhite) {
                    ((Timer) e.getSource()).stop(); // Stop the timer after the second color change
                }
            }
        });

        timer.setRepeats(true);
        timer.start();
    }
}





    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game(name,highscore).setVisible(true);              
                
            }
        });
    }                  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Blue;
    private javax.swing.JButton Green;
    private javax.swing.JLabel HighScore;
    private javax.swing.JButton Red;
    private javax.swing.JLabel User;
    private javax.swing.JButton Yellow;
    private javax.swing.JLabel counterLabel;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    private static String name;
    private int score=0;
    private int sequenceLength;
    private static int highscore;
    private ArrayList<Integer> sequenceColors = new ArrayList<Integer>();
    private ArrayList<Integer> userColors = new ArrayList<Integer>();
}
